// Code generated by mockery v2.46.2. DO NOT EDIT.

package manager

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepo is an autogenerated mock type for the Repo type
type MockRepo struct {
	mock.Mock
}

type MockRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepo) EXPECT() *MockRepo_Expecter {
	return &MockRepo_Expecter{mock: &_m.Mock}
}

// AddLaptop provides a mock function with given fields: ctx, laptop
func (_m *MockRepo) AddLaptop(ctx context.Context, laptop []Laptop) error {
	ret := _m.Called(ctx, laptop)

	if len(ret) == 0 {
		panic("no return value specified for AddLaptop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []Laptop) error); ok {
		r0 = rf(ctx, laptop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepo_AddLaptop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLaptop'
type MockRepo_AddLaptop_Call struct {
	*mock.Call
}

// AddLaptop is a helper method to define mock.On call
//   - ctx context.Context
//   - laptop []Laptop
func (_e *MockRepo_Expecter) AddLaptop(ctx interface{}, laptop interface{}) *MockRepo_AddLaptop_Call {
	return &MockRepo_AddLaptop_Call{Call: _e.mock.On("AddLaptop", ctx, laptop)}
}

func (_c *MockRepo_AddLaptop_Call) Run(run func(ctx context.Context, laptop []Laptop)) *MockRepo_AddLaptop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]Laptop))
	})
	return _c
}

func (_c *MockRepo_AddLaptop_Call) Return(_a0 error) *MockRepo_AddLaptop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepo_AddLaptop_Call) RunAndReturn(run func(context.Context, []Laptop) error) *MockRepo_AddLaptop_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllLaptop provides a mock function with given fields: ctx
func (_m *MockRepo) GetAllLaptop(ctx context.Context) ([]Laptop, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllLaptop")
	}

	var r0 []Laptop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Laptop, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Laptop); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Laptop)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_GetAllLaptop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLaptop'
type MockRepo_GetAllLaptop_Call struct {
	*mock.Call
}

// GetAllLaptop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepo_Expecter) GetAllLaptop(ctx interface{}) *MockRepo_GetAllLaptop_Call {
	return &MockRepo_GetAllLaptop_Call{Call: _e.mock.On("GetAllLaptop", ctx)}
}

func (_c *MockRepo_GetAllLaptop_Call) Run(run func(ctx context.Context)) *MockRepo_GetAllLaptop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepo_GetAllLaptop_Call) Return(_a0 []Laptop, _a1 error) *MockRepo_GetAllLaptop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_GetAllLaptop_Call) RunAndReturn(run func(context.Context) ([]Laptop, error)) *MockRepo_GetAllLaptop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepo creates a new instance of MockRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepo {
	mock := &MockRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
